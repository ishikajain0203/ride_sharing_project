
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  role: 'role',
  credibility_score: 'credibility_score',
  rating: 'rating',
  cancellation_count: 'cancellation_count',
  password_hash: 'password_hash',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.VehicleScalarFieldEnum = {
  vehicle_id: 'vehicle_id',
  user_id: 'user_id',
  vehicle_type: 'vehicle_type'
};

exports.Prisma.RideScalarFieldEnum = {
  ride_id: 'ride_id',
  driver_id: 'driver_id',
  vehicle_id: 'vehicle_id',
  start_location: 'start_location',
  end_location: 'end_location',
  start_date: 'start_date',
  start_time: 'start_time',
  total_fare: 'total_fare',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RideParticipantScalarFieldEnum = {
  id: 'id',
  ride_id: 'ride_id',
  user_id: 'user_id',
  share_fare: 'share_fare',
  booking_time: 'booking_time',
  status: 'status'
};

exports.Prisma.PaymentScalarFieldEnum = {
  payment_id: 'payment_id',
  ride_id: 'ride_id',
  payer_id: 'payer_id',
  amount: 'amount',
  paid_at: 'paid_at'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  feedback_id: 'feedback_id',
  ride_id: 'ride_id',
  giver_id: 'giver_id',
  receiver_id: 'receiver_id',
  rating: 'rating',
  comfort_flag: 'comfort_flag',
  comments: 'comments',
  created_at: 'created_at'
};

exports.Prisma.SOS_LogScalarFieldEnum = {
  sos_id: 'sos_id',
  ride_id: 'ride_id',
  trigger_user_id: 'trigger_user_id',
  trigger_time: 'trigger_time',
  location_at_trigger: 'location_at_trigger',
  status: 'status'
};

exports.Prisma.SOS_InvolvedScalarFieldEnum = {
  id: 'id',
  sos_id: 'sos_id',
  user_id: 'user_id'
};

exports.Prisma.Committee_ActionScalarFieldEnum = {
  action_id: 'action_id',
  sos_id: 'sos_id',
  user_id: 'user_id',
  action_type: 'action_type',
  action_date: 'action_date',
  notes: 'notes'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  student: 'student',
  committee_admin: 'committee_admin'
};

exports.RideStatus = exports.$Enums.RideStatus = {
  open: 'open',
  booked: 'booked',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.ParticipantStatus = exports.$Enums.ParticipantStatus = {
  booked: 'booked',
  cancelled: 'cancelled',
  completed: 'completed'
};

exports.ComfortFlag = exports.$Enums.ComfortFlag = {
  comfortable: 'comfortable',
  uncomfortable: 'uncomfortable'
};

exports.CommitteeActionType = exports.$Enums.CommitteeActionType = {
  warning: 'warning',
  penalty: 'penalty',
  ban: 'ban',
  feedback_review: 'feedback_review'
};

exports.Prisma.ModelName = {
  User: 'User',
  Vehicle: 'Vehicle',
  Ride: 'Ride',
  RideParticipant: 'RideParticipant',
  Payment: 'Payment',
  Feedback: 'Feedback',
  SOS_Log: 'SOS_Log',
  SOS_Involved: 'SOS_Involved',
  Committee_Action: 'Committee_Action'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
